# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å.
# üìå–ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå–£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –¥–ª–∏–Ω—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –µ—ë –ø–ª–æ—â–∞–¥—å.
import random
from math import pi


class Circle:
    def __init__(self, radius):
        self.radius = radius

    def length(self):
        return round(2 * pi * self.radius, 5)

    def area(self):
        return round(pi * self.radius ** 2, 5)


krug = Circle(5)


# print(krug.area())
# print(krug.length())

# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫.
# üìå–ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå–£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä –∏ –ø–ª–æ—â–∞–¥—å.
# üìå–ï—Å–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É –Ω–∞—Å –∫–≤–∞–¥—Ä–∞—Ç.

class Rectangle:
    def __init__(self, a, b=None):
        self.a = a
        self.b = a if b is None else b

    def length(self):
        return (self.a + self.b) * 2

    def area(self):
        return self.a * self.b


rec1 = Rectangle(5, 6)


# print(rec1.length())
# print(rec1.area())

# üìå–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ: –§–ò–û, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ç.–ø. –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä.
# üìå–£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç–æ–¥—ã birthday –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞ –≥–æ–¥,
# full_name –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –§–ò–û –∏ —Ç.–ø. –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä.
# üìå–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è,
# –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç.

class Human:
    def __init__(self, last_name, name, age, patronymic=None):
        self._name = name
        self._last_name = last_name
        self._patronymic = patronymic
        self._age = age

    def birthday(self):
        self._age += 1

    def get_age(self):
        return self._age

    def full_name(self):
        return f'{self._last_name} {self._name} {"" if self._patronymic is None else self._patronymic} c {self._age} –ª–µ—Ç'


# stone = Human('–ü–∞–Ω—Ñ–∏–ª–æ–≤', '–ö–∏—Ä–∏–ª–ª', 39, '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á')
# alisa = Human('–•—É–¥—è–∫–æ–≤–∞', '–ê–ª–∏—Å–∞', 18)
#
# print(stone.full_name())
# print(alisa.full_name())
#
# stone.birthday()
# print(stone.full_name())

class Employee(Human):
    def __init__(self, last_name, name, age, patronymic):
        super().__init__(last_name, name, age, patronymic)
        self.u_id = str(random.randint(1, 999999)).zfill(0)
        self.lvl_access = int(self.u_id) % 7


stone = Employee('–ü–∞–Ω—Ñ–∏–ª–æ–≤', '–ö–∏—Ä–∏–ª–ª', 39, '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á')


# print(stone.u_id)
# print(stone.lvl_access)

# üìå–°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∏ (–∏–ª–∏ –±–æ–ª–µ–µ) –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä —Ä—ã–±—ã, –ø—Ç–∏—Ü—ã –∏ —Ç.–ø.
# üìå–£ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞–∫ –æ–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –∏–º—è, —Ç–∞–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∞.
# üìå–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.


class Animal:
    def __init__(self, name, age, special):
        self.name = name
        self.age = age
        self.special = special

    def get_special(self):
        return self.special


class Dog(Animal):
    def __init__(self, name, age, **kwargs):
        super().__init__(name, age, kwargs.get('breed', None))


class Cat:
    def __init__(self, name, age, **kwargs):
        self.name = name
        self.age = age
        self.special = kwargs.get('color', None)

    def get_special(self):
        return self.special


class Fish:
    def __init__(self, name, age, **kwargs):
        self.name = name
        self.age = age
        self.special = kwargs.get('habitat', None)

    def get_special(self):
        return self.special


spanky = Dog('C–ø–∞–Ω–∫–∏', 3, breed="yuork")
tom = Cat('Tom', 15, color="Blue")
dorry = Fish('Dorry', 1, habitat="–î–æ–º")

for animal in [spanky, tom, dorry]:
    print(animal.get_special())
