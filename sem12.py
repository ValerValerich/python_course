# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå–≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –∑–Ω–∞—á–µ–Ω–∏–π.
# üìå–ü–∞—Ä–∞–º–µ—Ç—Ä k –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤.
import json


class Factorial:
    def __init__(self, limit):
        self.limit = limit
        self.function = []

    @property
    def fact(self):
        fact = 1
        values = []
        for i in range(1, self.limit + 1):
            fact *= i
            values.append(fact)
        return values

    def __call__(self, number):
        self.function = self.fact[-number:]
        return self.function

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        file = open('factorial_res.json', 'w', encoding='UTF-8')
        json.dump(self.function, file)
        file.close()


# l = Factorial(10)
# print(l.fact)
# print(l(3))

# üìå–î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 1. üìå–°–æ–∑–¥–∞–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª.

# with Factorial(10) as fac_10:
#     print(fac_10(4))
#
# print("–ö–æ–Ω–µ—Ü")


class Factor:
    def __init__(self, a=None, b=None, c=None):
        variables = {a, b, c}.difference({None})
        if len(variables) == 1:
            self.start, self.stop, self.step = 1, a, 1
        elif len(variables) == 2:
            self.start, self.stop, self.step = a, b, 1
        else:
            self.start, self.stop, self.step = a, b, c
        self.fact = self.factorial()

    def factorial(self):
        fact_list = []
        num = 1
        for i in range(self.start, self.stop + 1, self.step):
            num *= i
            fact_list.append(num)
        return fact_list

    def __iter__(self):
        return self

    def __next__(self):
        if self.fact:
            return self.fact.pop(0)
        raise StopIteration


first = Factor(10)
second = Factor(4, 8)
third = Factor(5, 12, 3)


# for i in first:
#     print(i)
# print()
# for i in second:
#     print(i)
# print()
# for i in third:
#     print(i)


# üìå–î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤.
# üìå–î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω—è—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
# –∏ –≤—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö).
# üìå–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–π—Å—Ç–≤.

class Reactangle:
    __slots__ = ('_side_a', '_side_b')

    def __init__(self, side_a: float, side_b: float = None):
        if side_a <= 0 or side_b <= 0:
            raise ValueError
        self._side_a = side_a
        self._side_b = side_b if side_b else side_a

    @property
    def side_a(self):
        return self._side_a

    @property
    def side_b(self):
        return self._side_b

    @side_a.setter
    def side_a(self, value):
        if value <= 0:
            raise ValueError
        self._side_a = value

    @side_b.setter
    def side_b(self, value):
        if value <= 0:
            raise ValueError
        self._side_b = value

    def __str__(self):
        return f'–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ {self.side_a} –∏ {self.side_b}'


# rec = Reactangle(4, 5)
# print(rec)
# rec.side_a = 20
# print(rec)
# # print(rec.__dict__) –û—à–∏–±–∫–∞, —Ç.–∫. –º—ã –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º —á–µ—Ä–µ–∑ slots
# print(rec.__slots__)


# –î–∏—Å–∫—Ä–∏–ø—Ç–æ—Ä


class Length:
    def __set_name__(self, owner, name):
        self.name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.name)

    def __set__(self, instance, value):
        if value <= 0:
            raise ValueError
        setattr(instance, self.name, value)


class Reactangle_2:
    side_a = Length()
    side_b = Length()

    def __init__(self, side_a: float, side_b: float = None):
        # if (side_a or side_b) <= 0:
        #     raise ValueError
        self.side_a = side_a
        self.side_b = side_b if side_b else side_a

    def __str__(self):
        return f'–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ {self.side_a} –∏ {self.side_b}'


rect = Reactangle_2(4, 5)
print(rect)
rect.side_b = 10
print(rect)
