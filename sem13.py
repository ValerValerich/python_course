# üìå–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ç–µ—Ö –ø–æ—Ä,
# –ø–æ–∫–∞ –æ–Ω –Ω–µ –≤–≤–µ–¥—ë—Ç —Ü–µ–ª–æ–µ –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.
# üìå–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

def input_number():
    while True:
        number = input('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: ')
        try:
            return int(number)
        except:
            try:
                return float(number)
            except:
                print('–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


# print(input_number())

# üìå–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–æ–≥ get –¥–ª—è —Å–ª–æ–≤–∞—Ä—è.
# üìå–ü–æ–º–∏–º–æ —Å–∞–º–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
# üìå–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª—é—á—É —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
# üìå–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π.


dict_1 = {1: 'one', 2: 'two'}


def our_get(dct: dict, key, default_value=None):
    try:
        return dct[key]
    except KeyError:
        return default_value
    except TypeError:
        return '–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –∫–ª—é—á–∞'


# print(our_get(dict_1, 2))
# print(our_get(dict_1, 1))
# print(our_get(dict_1, 3, default_value="–ü—É—Å—Ç–æ"))
# print(our_get(dict_1, [1, 3]))


# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å –±–∞–∑–æ–≤—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–ª–∞—Å—Å—ã-–∏—Å–∫–ª—é—á–µ–Ω–∏—è:
# ‚óã –æ—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è,
# ‚óã –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.

class LevelError(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return self.msg


class AccessError(LevelError):
    def __init__(self):
        super().__init__('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–∞')


class PermError(LevelError):
    def __init__(self):
        super().__init__('–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞')


# raise AccessError
# raise PermError

# üìå–î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –≤—ã–¥–∞–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö.
# üìå–ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞.


# üìå–í—Å–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–µ–º–∏–Ω–∞—Ä–∞ 8 –ø—Ä–æ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö,
# –≥–¥–µ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∏–º—è, –ª–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏
# —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 1 –¥–æ 7) —Å–æ—Ö—Ä–∞–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª.
# üìå–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå–û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
import os
import json

MIN_LVL = 1
MAX_LVL = 7


def create_json(path: str = 'users_sem13.json'):
    user_data = {}
    id_list = []
    while True:
        if os.path.exists(path):
            with open(path, 'r', encoding='UTF-8') as file:
                user_data = json.load(file)
        else:
            print("–ù–µ—Ç —Ñ–∞–π–ª–∞")
            break
        if user_data:
            for users in user_data.values():
                for user in users:
                    id_list.append(user[1])
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        if not name:
            break
    while True:
        u_id = input("–í–≤–µ–¥–∏—Ç–µ –ª–∏—á–Ω—ã–π ID: ")
        if u_id.isdigit():
            if int(u_id) not in id_list:
                u_id = int(u_id)
                break
            else:
                print(f'ID {u_id} —É–∂–µ –∑–∞–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID.')
        else:
            print('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
    while True:
        u_lvl = input("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ")
        if u_lvl.isdigit() and MIN_LVL <= int(u_lvl) <= MAX_LVL:
            break
        else:
            print(f'–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_LVL} –¥–æ {MAX_LVL}')

    if u_lvl in user_data:
        user_data[u_lvl].append((name, u_id))
    else:
        user_data[u_lvl] = [(name, u_id)]

    with open(path, 'w', encoding='UTF-8') as file:
        json.dump(user_data, file, indent=6, ensure_ascii=False)


create_json()


class User:
    def __init__(self, name: str, u_id: str, lvl: int):
        self.name = name
        self.u_id = u_id
        self.lvl = lvl



def load_users():
    users_set = set()
    with open('users_sem13.json', 'r', encoding='UTF-8') as file:
        data_users = json.load(file)
    for lvl, users in data_users.items():
        for user in users:
            name, u_id = user
            users_set.add(User(name, u_id, lvl))
    return users_set



data = load_users()
print(data)
