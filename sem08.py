# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ –Ω–æ–≤—ã–π —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
# –ò–º–µ–Ω–∞ (–∫–ª—é—á–∏) —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã. –ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è –ø–∞—Ä–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
import csv
import json
import os
import pickle


def create_json(old_file=0, file=0):
    dict_ = dict()
    with open(old_file, 'r', encoding='utf-8') as input_f:
        lines = input_f.readlines()
        for line in lines:
            line = list(line.split(','))
            print(line)
            dict_[line[0].title()] = float(line[1])
    print(dict_)

    with open(file, 'a', encoding='utf-8') as out_f:
        json.dump(dict_, out_f, indent=4, ensure_ascii=False)


# create_json(os.path.join(os.getcwd(), 'dir_for_sem08', 'list_of_corteg.txt'),
#             os.path.join(os.getcwd(), 'dir_for_sem08', 'new_json.json'))

#  –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è,
#  –ª–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 1 –¥–æ 7).
#  üìå–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª.
#  üìå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞.
#  üìå–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–ª—é—á—ë–º –¥–ª—è –∏–º–µ–Ω–∏.
#  üìå–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.
#  üìå–ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.

def save_in_json(path: str = 'users.json'):
    users_data = {}
    id_list = []
    while True:
        if os.path.exists(path):
            with open(path, 'r', encoding="utf-8") as file:
                users_data = json.load(file)
        if users_data:
            for users in users_data.values():
                for user in users:
                    id_list.append(user[1])
        name = input('Name\n')
        if not name:
            break
    while True:
        u_id = input("id\n")
        if u_id.isdigit():
            if int(u_id) not in id_list:
                u_id = int(u_id)
                break
            else:
                print('This ID is already in the database')
        else:
            print('Must be an Integer')
    while True:
        u_lvl = input('lvl\n')
        if u_lvl.isdigit() and 0 < int(u_lvl) < 8:
            break
        else:
            print('Must be between 1 and 7')
    if u_lvl in users_data:
        users_data[u_lvl].append((name, u_id))
    else:
        users_data[u_lvl] = [(name, u_id)]
    with open(path, 'w', encoding='UTF-8') as file:
        json.dump(users_data, file, indent=4, ensure_ascii=False)


# save_in_json()

def json_to_csv(json_path, csv_path):
    with open(json_path, 'r', encoding='UTF-8') as json_file, \
            open(csv_path, 'w', encoding='UTF-8') as csv_file:
        data: dict[str, list[str, int]] = json.load(json_file)
        users_list = []
        for u_lvl, users in data.items():
            for user in users:
                users_list.append((user[0], user[1], u_lvl))
        csv_writer = csv.writer(csv_file, dialect='excel', delimiter=' ', quoting=csv.QUOTE_MINIMAL)
        csv_writer.writerow(('Name', 'ID', 'LVL'))
        csv_writer.writerows(users_list)


# json_to_csv('users.json', 'users.csv')


# üìå–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ csv —Ñ–∞–π–ª –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è csv.DictReader.
# üìå–î–æ–ø–æ–ª–Ω–∏—Ç–µ id –¥–æ 10 —Ü–∏—Ñ—Ä –Ω–µ–∑–Ω–∞—á–∞—â–∏–º–∏ –Ω—É–ª—è–º–∏.
# üìå–í –∏–º–µ–Ω–∞—Ö –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ–ø–∏—Å–Ω–æ–π.
# üìå–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.
# üìå–ü–æ–ª—É—á–∏–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ json —Ñ–∞–π–ª,
# –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ csv —Ñ–∞–π–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π json —Å–ª–æ–≤–∞—Ä—å.
# üìå–ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.

def csv_to_json(csv_path='users.csv', json_path='users.json'):
    with open(csv_path, 'r', encoding='UTF-8') as csv_file, \
            open(json_path, 'w', encoding='UTF-8') as json_file:
        data = csv_file.readlines()
        users_data = {}
        for i in range(len(data)):
            if i and data[i] != '\n':
                user = data[i].strip().replace('"', '').split()
                user[1] = f'{user[1]:0>10}'
                u_hash = str(hash(user[0] + user[1]))
                users_data[u_hash] = user
        json.dump(users_data, json_file, indent=4, ensure_ascii=False)


# csv_to_json()

def json_to_pickle(path: str = os.getcwd()):
    file_list = []
    for files in os.walk(path):
        for file in files[2]:
            if file.endswith('.json'):
                file_list.append(os.path.join(files[0], file))
    for file in file_list:
        with open(file.rsplit('.', 1)[0] + '.pickle', 'wb') as data, \
                open(file, 'r', encoding='UTF-8') as json_file:
           users_file = json.load(json_file)
           pickle.dump(users_file, data)

# json_to_pickle()

def pickle_load(path):
    with open(path, 'rb') as data:
        users = pickle.load(data)
        print(users)

pickle_load('users.pickle')