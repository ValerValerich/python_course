# üìå–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª.
# üìå–ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å.
import logging


# logger = logging.getLogger(__name__)
# FORMAT = '{asctime:20}-{levelname:20}-{name}:{msg}'
# logging.basicConfig(format=FORMAT, style='{', filename='logger.log', filemode='w', level=logging.DEBUG)
#
#
# def div(a, b):
#     try:
#         return a / b
#     except ZeroDivisionError as exp:
#         logger.error(msg=f'{exp}')


# if __name__ == '__main__':
#     div(0, 0)
#     div(0, 1)
#     div(12, 12)


# üìå–ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
# –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª.
# üìå–ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å logging.

def logg(func):
    def wrap(*args, **kwargs):
        res = func(*args, **kwargs)
        logger = logging.getLogger(__name__)
        FORMAT = '{asctime:20}-{levelname:20}-{name}:{msg}'
        logging.basicConfig(format=FORMAT, style='{', filename='logger.log', filemode='w', encoding='UTF-8',
                            level=logging.DEBUG)
        logger.info(f"{args = }; {kwargs = }, {res = }")
        return res

    return wrap


@logg
def funct(a, b):
    return a + b


# funct(2, 2)
# funct(0, 2)
# funct(-9, 2)


# üìå–î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
# üìå–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
# ‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
# ‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
# ‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
# ‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
# ‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
#
# from functools import wraps
# import json
# import os
# import logging
#
# FORMAT = '{asctime} {levelname} {name} {funcName} {msg}'
# logging.basicConfig(format=FORMAT, filename='logfile.log', filemode='a', encoding='utf-8', level=logging.INFO,
# style="{")
# logger = logging.getLogger(__name__)
#
#
# def json_safe(func):
# @wraps(func)
# def wrapper(*args, **kwargs):
# result = func(*args, **kwargs)
# str_args = ', '.join([str(arg) for arg in args]) if args else ' '
# str_kwargs = ', '.join([f'{key}={value}' for key, value in kwargs.items()]) if kwargs else ' '
# re_msg = f'{result} -> {str_args} | {str_kwargs}'
# logger.info(msg=re_msg)
#
# return result
#
# return wrapper
#
#
# @json_safe
# def function_(a, b):
# return a + b
#
#
# function_(337, 499)
# function_(0, 555)
# function_(a=23432, b=5645655)
# function_(4560, b=564555)


# üìå–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
# üìå–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# üìå–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

from datetime import datetime


def date_in_text(st: str):
    number, weekday, month = st.split()
    number = int(''.join([ch for ch in number if ch.isdigit()]))
    weekdays = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    months = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫']
    month = int(''.join([str(i + 1) for i in range(len(months)) if month.startswith(months[i])]))
    date = datetime(int(datetime.now().year), month, 1)
    first_month = date.weekday()
    weekdays = weekdays[first_month:] + weekdays[:first_month]

    i = 0
    while number > 0:
        if weekdays[i % 7] == weekday:
            number -= 1
        i += 1
    return i


# print(date_in_text('1-–æ–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–æ—è–±—Ä—è'))

# üìå–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
# üìå–î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# üìå–ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å.
# –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏,
# —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
# üìå*–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è
# –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.


from datetime import datetime
from sys import argv

WEEKDAYS = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
MONTHS = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å',
          '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç',
          '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
CUT_MONTHS = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫']


def check_week_day(data: str):


    number, weekday, month = data.split()
    number = int(number[:1])

    month = int(''.join([str(i + 1) for i in range(len(CUT_MONTHS)) if month.startswith(CUT_MONTHS[i])]))
    date = datetime(2023, month, 1)
    first_month = date.weekday()
    weekdays = WEEKDAYS[first_month:] + WEEKDAYS[:first_month]

    i = 0
    while number > 0:
        if weekdays[i % 7] == weekday:
            number -= 1
        i += 1
    return i

if __name__ == '__main__':
    if len(data := argv[1:]) > 0:
        month = MONTHS[datetime.now().month - 1]
        weekday = WEEKDAYS[datetime.now().weekday()]
        number = 1
        for i in range(len(data)):
            if data[i] in WEEKDAYS:
                weekday = data[i]
            for mnt in CUT_MONTHS:
                if data[i].startswith(mnt):
                    month = data[i]
            for ch in data[i]:
                if ch == '-':
                    number = data[i]
        data = ' '.join([f'{number}-–∞—è', weekday, month])
        print(data)
    else:
        data = input('–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å: ')

print(check_week_day(data))
