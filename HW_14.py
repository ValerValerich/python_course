# üìå–ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å).
# üìå–ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
# üìå–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ setUp

from HW_12 import Student  # —Å —é–∑–µ—Ä–∞–º–∏ –∏–∑ 13 —Å–µ–º–∏–Ω–∞—Ä–∞ —É –º–µ–Ω—è –±–µ–¥–∞, –≤–∑—è–ª —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
import unittest


class TestUser(unittest.TestCase):
    def setUp(self):
        self.f_user = Student("Ivan", "Ivanich", "Ivanov")


    def test_len_name(self):
        self.assertGreaterEqual(len(self.f_user.name), 3)


    def test_name_title(self):
        with self.assertRaises(ValueError):
            self.s_user = Student("timur", "Ivanich", "Ivanov")

    def test_patronymic(self):
        self.assertTrue(self.f_user.patronymic.isalpha())



if __name__ == '__main__':
    unittest.main(verbosity=True)
