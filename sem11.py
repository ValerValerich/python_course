# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–æ—è –°—Ç—Ä–æ–∫–∞, –≥–¥–µ:
# üìå–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ str
# üìå–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (time.time)
import time
from functools import total_ordering

class MyString(str):
    """–≠—Ç–æ –∫–ª–∞—Å—Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥ str"""

    def __new__(cls, st, author):
        instance = super().__new__(cls, st)
        instance.author = author
        instance.st = st
        instance.time_ = time.time()
        return instance


strng = MyString("some text", 'Valeriy')


# print(strng, strng.author, strng.time_)


# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É —Å–≤–æ–π—Å—Ç–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –∏ —Å—Ç—Ä–æ–∫—É.
# üìå–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä—É —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ö–∏–≤–æ–≤
# üìålist-–∞—Ä—Ö–∏–≤—ã —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞

class Archive:
    """–≠—Ç–æ –∫–ª–∞—Å—Å —è–≤–ª—è–µ—Ç—Å—è –∞—Ä—Ö–∏–≤–æ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""

    _instance = None

    def __new__(cls, num, st):
        """–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç"""
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.nums = []
            cls._instance.sts = []
        else:
            cls._instance.nums.append(cls._instance.num)
            cls._instance.sts.append(cls._instance.st)
        return cls._instance

    def __init__(self, num, st):
        """–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞"""
        self.num = num
        self.st = st

    def __str__(self):
        """–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É –≤ –∫–æ–Ω—Å–æ–ª—å"""
        return f"{self.num},{self.nums}, {self.st}, {self.sts}"

    def __repr__(self):
        return f'Archive({self.num}, "{self.st}")'


a = Archive(10, 'ten')
# print(a)
b = Archive(20, 'twenty')
# print(b)
c = Archive(30, 'thirsty')
# print(c)
# help(MyString)
# help(Archive)

# üìå–î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤ –∏–∑ –∑–∞–¥–∞—á–∏ 2.
# üìå–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
a = Archive(4, 'fegawgf')


# print(f'{a=}')


# üìå–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.
# üìå–î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è.
# üìå–ü—Ä–∏ —ç—Ç–æ–º –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
# üìå–°–∫–ª–∞–¥—ã–≤–∞–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä—ã, –∞ –Ω–µ –¥–ª–∏–Ω–Ω—É –∏ —à–∏—Ä–∏–Ω—É.
# üìå–ü—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

class Rectangle:
    def __init__(self, a, b=None):
        self.a = a
        self.b = a if b is None else b

    def length(self):
        return (self.a + self.b) * 2

    def area(self):
        return self.a * self.b

    def __sub__(self, other):
        if isinstance(other, Rectangle):
            res = Rectangle.length(self) - Rectangle.length(other)
            if res < 0:
                return "–ü–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!"
            else:
                return Rectangle(self.a - other.a, self.b - other.b)
        else:
            raise TypeError

    def __add__(self, other):
        if isinstance(other, Rectangle):
            res = Rectangle.length(self) + Rectangle.length(other)
            if res < 0:
                return "–ü–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!"
            else:
                return Rectangle(self.a + other.a, self.b + other.b)
        else:
            raise TypeError

    def __eq__(self, other):
        if isinstance(other, Rectangle):
            return self.area() == other.area()
        else:
            raise TypeError

    def __lt__(self, other):
        if isinstance(other, Rectangle):
            return self.area() < other.area()
        else:
            raise TypeError


rec1 = Rectangle(5)
rec2 = Rectangle(3, 4)
rec3 = rec1 - rec2
# print(rec3, rec3.length())
rec4 = rec3 + rec1
# print(rec4, rec4.length())

print(rec1 == rec4)
print(rec1 < rec4)
